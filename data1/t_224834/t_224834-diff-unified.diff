--- t_224834/left_TestPriorityQueue_1.2.java	2013-03-17 15:47:08.000000000 +0100
+++ t_224834/right_TestPriorityQueue_1.3.java	2013-03-17 15:47:08.000000000 +0100
@@ -56,61 +56,83 @@
 
 import java.util.Date;
 import java.util.Random;
-import junit.framework.*;
+import junit.framework.TestCase;
 
-public class TestPriorityQueue extends TestCase {
-   public TestPriorityQueue(String name) {
-     super(name);
-   }
-
-  private static class IntegerQueue extends PriorityQueue {
-    public IntegerQueue(int count) { 
-      super();
-      initialize(count);
+public class TestPriorityQueue
+    extends TestCase
+{
+    public TestPriorityQueue(String name)
+    {
+	super(name);
     }
 
-    protected boolean lessThan(Object a, Object b) {
-      return ((Integer) a).intValue() < ((Integer) b).intValue();
+    private static class IntegerQueue
+	extends PriorityQueue
+    {
+	public IntegerQueue(int count)
+	{
+	    super();
+	    initialize(count);
+	}
+
+	protected boolean lessThan(Object a, Object b)
+	{
+	    return ((Integer) a).intValue() < ((Integer) b).intValue();
+	}
     }
-  }
 
-  public void testPQ() throws Exception {
-    testPQ(10000);
-  }
-
-  public static void testPQ(int count) {
-    PriorityQueue pq = new IntegerQueue(count);
-    Random gen = new Random();
-    int sum = 0, sum2 = 0;
-    
-    Date start = new Date();
-
-    for (int i = 0; i < count; i++) {
-      int next = gen.nextInt();
-      sum += next;
-      pq.put(new Integer(next));
+    public void testPQ()
+	throws Exception
+    {
+	testPQ(10000);
     }
 
-//      Date end = new Date();
+    public static void testPQ(int count)
+    {
+	PriorityQueue pq = new IntegerQueue(count);
+	Random gen = new Random();
+	int sum = 0, sum2 = 0;
+
+	Date start = new Date();
+
+	for (int i = 0; i < count; i++)
+	{
+	    int next = gen.nextInt();
+	    sum += next;
+	    pq.put(new Integer(next));
+	}
+
+	//      Date end = new Date();
+
+	//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);
+	//      System.out.println(" microseconds/put");
+
+	//      start = new Date();
+
+	int last = Integer.MIN_VALUE;
+	for (int i = 0; i < count; i++)
+	{
+	    Integer next = (Integer)pq.pop();
+	    assertTrue(next.intValue() >= last);
+	    last = next.intValue();
+	    sum2 += last;
+	}
 
-//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);
-//      System.out.println(" microseconds/put");
+	assertEquals(sum, sum2);
+	//      end = new Date();
 
-//      start = new Date();
-
-    int last = Integer.MIN_VALUE;
-    for (int i = 0; i < count; i++) {
-      Integer next = (Integer)pq.pop();
-      assertTrue(next.intValue() >= last);
-      last = next.intValue();
-      sum2 += last;
+	//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);
+	//      System.out.println(" microseconds/pop");
     }
 
-    assertEquals(sum, sum2); 
-//      end = new Date();
-
-//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);
-//      System.out.println(" microseconds/pop");
-
-  }
+    public void testClear()
+    {
+	PriorityQueue pq = new IntegerQueue(3);
+	pq.put(new Integer(2));
+	pq.put(new Integer(3));
+	pq.put(new Integer(1));
+	assertEquals(3, pq.size());
+	pq.clear();
+	assertEquals(0, pq.size());
+    }
 }
